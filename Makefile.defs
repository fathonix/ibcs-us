#
# The kernel IBCS made these optional.  ibcs-us includes everything, so they
# never change.
#
IBCS_CFLAGS += -DIBCS_VERSION="\"4.0\""
IBCS_CFLAGS += -DCONFIG_BINFMT_XOUT_X286
IBCS_CFLAGS += -DCONFIG_ABI_TRACE
IBCS_CFLAGS += -DCONFIG_ABI_SPX
IBCS_CFLAGS += -DCONFIG_ABI_XTI
IBCS_CFLAGS += -DCONFIG_ABI_SHINOMAP
IBCS_CFLAGS += -D_KSL=32
IBCS_CFLAGS += -D_KSL_IBCS_US

#
# Everything is built in $(ROOT_DIR)/build.
#
ROOT_DIR	:= $(if $(dir $(lastword $(MAKEFILE_LIST))), $(patsubst %/, %, $(dir $(lastword $(MAKEFILE_LIST)))), .)
BUILD_DIR	:= $(ROOT_DIR)/build
BUILD_TEST_DIR	:= $(BUILD_DIR)/tests

INCLUDES	?=	-I$(ROOT_DIR)/include
GDBMAP		?=	-ffile-prefix-map=.=./$(COMPONENT_NAME) -ffile-prefix-map=../include/=include/  

CFLAGS_OPT	?=	-O2 -fno-builtin -ffreestanding
CFLAGS_DEBUG	?=	-g
CFLAGS_ARCH	?=	-m32

CFLAGS_WARNINGS	?=	-Wall -Wextra -Wno-pragmas -Wno-sign-compare -Wno-unused-parameter -Wchar-subscripts -Wduplicated-branches -Wduplicated-cond -Wdouble-promotion -Wenum-compare -Wformat -Wformat-signedness -Wimplicit-fallthrough -Wmaybe-uninitialized -Wnormalized -Wnull-dereference -Wpointer-arith -Wshadow -Wundef -Wuninitialized
CFLAGS_ERROR	?=	-Werror

CFLAGS		?=	$(INCLUDES) $(CFLAGS_DEBUG) $(CFLAGS_OPT) $(CFLAGS_WARNINGS) $(CFLAGS_ERROR) $(CFLAGS_ARCH) $(CFLAGS_DEFINES) $(IBCS_CFLAGS) $(CFLAGS_EXTRA) $(GDBMAP)

#
# The -Wl,-Ttext=0xbf000000 asks Linux to load the program at that address.
# The max size is 3GB, so it must all fit under 0xc0000000 and it needs space
# for the heap, so that is about as high as it can go.  Moving it up there
# gets it out of the way of the programs we are tring to execute.
#
LDFLAGS_ADDR	?=	-Wl,-Ttext=0xbf000000
LDFLAGS_BUILDID	?=	-Wl,--build-id=none
LDFLAGS_LIBS	?=	-lgcc -nostdlib
LDFLAGS_STATIC	?=	-static
LDFLAGS		?= 	$(LDFLAGS_LIBS) $(LDFLAGS_BUILDID) $(LDFLAGS_ADDR) $(LDFLAGS_STATIC)

#
# C files can contain their own unit tests which are compiled in when
# -DUNIT_TEST is defined.  This must define a function with the signature
# "extern void unit_test_COMPONENT_FILENAME_c(void)".  If that function
# was renamed to main() and the file compiled with -lc and run, it must
# exit with 0 exit status if all tests pass or call exit(1) if a test
# fails.
#
# The top level make can build a file that runs all tests.  If uses the
# grep below to find the C files that have UNIT_TESTS.
#
UNIT_TEST_GREP	:= grep -l '^\#ifn\?def[ 	]\+UNIT_TEST\>'

#
# This is what the subdirectory Makefiles do.
#
# The top level Makefile defines it's own "all".
#
ifneq "$(strip $(ROOT_DIR))" "."

COMPONENT_NAME		:= $(notdir $(abspath .))
COMPONENT_OBJ		:= $(BUILD_DIR)/$(COMPONENT_NAME).o
COMPONENT_BUILD_DIR	:= $(BUILD_DIR)/build-$(COMPONENT_NAME)
COMPONENT_SOURCES	?= $(wildcard *.c)

all::	$(COMPONENT_OBJ)

.SECONDEXPANSION:

#
#
# How to build the component .o
#
COMPONENT_OBJECTS := $(patsubst %.c, $(COMPONENT_BUILD_DIR)/%.o, $(COMPONENT_SOURCES))
$(COMPONENT_OBJ): $(COMPONENT_OBJECTS) | $$(@D)
	$(CC) $(CFLAGS) -nostdlib -no-pie -Wl,-z,now -Wl,-r -o $@ $(COMPONENT_OBJECTS)

$(COMPONENT_BUILD_DIR)/%.o: %.c $(COMPONENT_BUILD_DIR)/%.c.deps | $$(@D)
	$(CC) $(CFLAGS) -MMD -MP -MT $@ -MF $(@:.o=.c.deps.tmp) -c -o $@ ./$(@F:.o=.c)
	@mv --force $(@:.o=.c.deps.tmp) $(@:.o=.c.deps)

#
# C header dependencies - straight from the compiler manual.
#
.PRECIOUS: $(COMPONENT_BUILD_DIR)/%.c.deps
$(COMPONENT_BUILD_DIR)/%.c.deps: ;

include $(wildcard $(patsubst %.c, $(COMPONENT_BUILD_DIR)/%.c.deps, $(COMPONENT_SOURCES)))

#
# Quick ways to build the .i and .s.  Only used for debugging.
#
%.i: %.c
	$(CC) $(CFLAGS) $(IF) -E -o $@ $<

%.s: %.c
	$(CC) $(CFLAGS) $(IF) -S -o $@ ./$<

#
# Building the unit tests.
#
# "make test-xxx" builds and runs the unit tests for xxx.c.
#
COMPONENT_TEST_NAME	:= $(BUILD_TEST_DIR)/$(COMPONENT_NAME)
COMPONENT_TEST_SRCS	:= $(shell $(UNIT_TEST_GREP) $(COMPONENT_SOURCES))


test-%:	$(COMPONENT_TEST_NAME)/test-%
	$^

$(COMPONENT_TEST_NAME).o: $(foreach src, $(COMPONENT_TEST_SRCS), $(COMPONENT_TEST_NAME)/$(src:%.c=%.o))
	$(CC) $(CFLAGS) -nostdlib -no-pie -Wl,-z,now -Wl,-r -o $@  $^

$(COMPONENT_TEST_NAME)/%.o: %.c $(COMPONENT_BUILD_DIR)/%.c.deps | $$(@D)
	$(CC) $(CFLAGS) -Og -g -DUNIT_TEST -c -o $@ $(@F:.o=.c)

$(COMPONENT_TEST_NAME)/test-%: $(COMPONENT_TEST_NAME)/%.o
	( \
	    printf "extern void unit_test_%s_%s_c(int ac, const char** av, const char** ep);\n" $(notdir $(@D)) $(subst -,_,$(patsubst test-%, %, $(@F:.o=))); \
	    printf "int main(int ac, const char** av, const char** ep)\n{\n"; \
	    printf "    unit_test_%s_%s_c(ac, av, ep);\n" $(notdir $(@D)) $(subst -,_,$(patsubst test-%, %, $(@F:.o=))); \
	    printf "    return 0;\n"; \
	    printf "}\n" \
	) > $@.c
	$(CC) $(CFLAGS) -Og -DUNIT_TEST -o $@ $@.c $^

dont-remove-it:: $(foreach src, $(COMPONENT_TEST_SRCS), $(COMPONENT_TEST_NAME)/test-$(src:.c=))


#
# Make the directories exist.
#
$(BUILD_DIR) $(COMPONENT_BUILD_DIR) $(COMPONENT_TEST_NAME):
	mkdir -p $@


.PHONY: clean
clean::
	rm -rf *.[ios] $(COMPONENT_OBJ) $(COMPONENT_BUILD_DIR) \
	    $(COMPONENT_TEST_NAME)
endif
